#!/usr/bin/with-contenv bash
# shellcheck shell=bash source=/dev/null

path="/config/machine-learning"

if [ "${MACHINE_LEARNING_GPU_ACCELERATION,,}" = "cuda" ]; then

    cuda_path="$path/cuda"

    libcudnn="libcudnn8_8.9.7.29-1+cuda12.2.deb"
    libcudnn_url="https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/libcudnn8_8.9.7.29-1+cuda12.2_amd64.deb"

    venv="$cuda_path/venv"
    source="$venv/bin/activate"
    libcudnn_path="$cuda_path/$libcudnn"

    mkdir -p "$cuda_path"

    if [ ! -e "$libcudnn_path" ]; then
        echo "**** download libcudnn ****"
        curl -o "$libcudnn_path" -L \
            "$libcudnn_url"
    fi
    echo "**** install libcudnn ****"
    dpkg -i "$libcudnn_path"

    apt-get update
    apt-get install --no-install-recommends -y \
        nvidia-cuda-dev

    # create venv if it does not exist
    if [ ! -d "$venv" ]; then
        python3 -m venv "$venv"
    fi

    # install/update pip packages to /config venv
    # and install onnxruntime nightly until it supports cuda 12 https://github.com/Microsoft/onnxruntime/releases/
    source "$source"
    cd /app/immich/machine-learning/cuda || exit
    poetry install --sync --no-interaction --no-ansi --no-root --with cuda --without dev

## commented until openvino supports python 3.11 (probably with onnxruntime-openvino 1.17.0) or when using ubuntu 24.04 for the base image
# elif [ "${MACHINE_LEARNING_GPU_ACCELERATION,,}" = "openvino" ]; then
#     openvino_path="$path/openvino"
#     venv="$openvino_path/venv"
#     source="$venv/bin/activate"

#     # create venv if it does not exist
#     if [ ! -d "$venv" ]; then
#         python3 -m venv "$venv"
#     fi

#     source "$source"
#     cd /app/immich/machine-learning || exit
#     poetry install --sync --no-interaction --no-ansi --no-root --with openvino --without dev

fi
